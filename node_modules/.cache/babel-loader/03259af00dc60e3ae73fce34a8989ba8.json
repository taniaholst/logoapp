{"ast":null,"code":"'use strict';\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar elevenDigits = new RegExp('^\\\\d{11}$');\n\nvar fnr = function fnr(digits) {\n  return idnr(digits);\n};\n\nvar dnr = function dnr(digits) {\n  return idnr(digits);\n};\n\nvar idnr = function idnr(digits) {\n  var isDnr = digits.substring(0, 1) >= 4;\n  return validate(digits, isDnr);\n};\n\nvar validate = function validate(digits, isDnr) {\n  if (!elevenDigits.test(digits)) {\n    return {\n      status: \"invalid\",\n      reasons: [\"fnr or dnr must consist of 11 digits\"]\n    };\n  }\n\n  var errMsgs = [].concat(_toConsumableArray(checksums(digits)), _toConsumableArray(birthdate(digits, isDnr)));\n  return errMsgs.length == 0 ? {\n    status: \"valid\",\n    type: isDnr ? 'dnr' : 'fnr'\n  } : {\n    status: \"invalid\",\n    reasons: errMsgs\n  };\n};\n\nvar checksums = function checksums(digits) {\n  var k1 = 11 - (3 * digits[0] + 7 * digits[1] + 6 * digits[2] + 1 * digits[3] + 8 * digits[4] + 9 * digits[5] + 4 * digits[6] + 5 * digits[7] + 2 * digits[8]) % 11;\n  var k2 = 11 - (5 * digits[0] + 4 * digits[1] + 3 * digits[2] + 2 * digits[3] + 7 * digits[4] + 6 * digits[5] + 5 * digits[6] + 4 * digits[7] + 3 * digits[8] + 2 * k1) % 11;\n  if (k1 === 11) k1 = 0;\n  if (k2 === 11) k2 = 0;\n  return k1 < 10 && k2 < 10 && k1 == digits[9] && k2 == digits[10] ? [] : [\"checksums don't match\"];\n}; // copied from https://stackoverflow.com/questions/5812220/how-to-validate-a-date\n\n\nvar birthdate = function birthdate(digits, isDnr) {\n  if (isDnr) {\n    digits = digits.substring(0, 1) - 4 + digits.substring(1);\n  }\n\n  var day = digits.substring(0, 2);\n  var month = digits.substring(2, 4);\n  var year = digits.substring(4, 6);\n  var date = new Date(year, month - 1, day);\n  return date && date.getMonth() + 1 == month && date.getDate() == day ? [] : [\"invalid date\"];\n};\n\nexports.fnr = fnr;\nexports.dnr = dnr;\nexports.idnr = idnr;","map":{"version":3,"sources":["/Users/taniaholst/Documents/nav/logoapp/node_modules/@navikt/fnrvalidator/dist/validator.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","elevenDigits","RegExp","fnr","digits","idnr","dnr","isDnr","substring","validate","test","status","reasons","errMsgs","concat","checksums","birthdate","type","k1","k2","day","month","year","date","Date","getMonth","getDate","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar elevenDigits = new RegExp('^\\\\d{11}$');\n\nvar fnr = function fnr(digits) {\n  return idnr(digits);\n};\n\nvar dnr = function dnr(digits) {\n  return idnr(digits);\n};\n\nvar idnr = function idnr(digits) {\n  var isDnr = digits.substring(0, 1) >= 4;\n  return validate(digits, isDnr);\n};\n\nvar validate = function validate(digits, isDnr) {\n  if (!elevenDigits.test(digits)) {\n    return {\n      status: \"invalid\",\n      reasons: [\"fnr or dnr must consist of 11 digits\"]\n    };\n  }\n\n  var errMsgs = [].concat(_toConsumableArray(checksums(digits)), _toConsumableArray(birthdate(digits, isDnr)));\n  return errMsgs.length == 0 ? {\n    status: \"valid\",\n    type: isDnr ? 'dnr' : 'fnr'\n  } : {\n    status: \"invalid\",\n    reasons: errMsgs\n  };\n};\n\nvar checksums = function checksums(digits) {\n  var k1 = 11 - (3 * digits[0] + 7 * digits[1] + 6 * digits[2] + 1 * digits[3] + 8 * digits[4] + 9 * digits[5] + 4 * digits[6] + 5 * digits[7] + 2 * digits[8]) % 11;\n  var k2 = 11 - (5 * digits[0] + 4 * digits[1] + 3 * digits[2] + 2 * digits[3] + 7 * digits[4] + 6 * digits[5] + 5 * digits[6] + 4 * digits[7] + 3 * digits[8] + 2 * k1) % 11;\n  if (k1 === 11) k1 = 0;\n  if (k2 === 11) k2 = 0;\n  return k1 < 10 && k2 < 10 && k1 == digits[9] && k2 == digits[10] ? [] : [\"checksums don't match\"];\n}; // copied from https://stackoverflow.com/questions/5812220/how-to-validate-a-date\n\n\nvar birthdate = function birthdate(digits, isDnr) {\n  if (isDnr) {\n    digits = digits.substring(0, 1) - 4 + digits.substring(1);\n  }\n\n  var day = digits.substring(0, 2);\n  var month = digits.substring(2, 4);\n  var year = digits.substring(4, 6);\n  var date = new Date(year, month - 1, day);\n  return date && date.getMonth() + 1 == month && date.getDate() == day ? [] : [\"invalid date\"];\n};\n\nexports.fnr = fnr;\nexports.dnr = dnr;\nexports.idnr = idnr;"]},"metadata":{},"sourceType":"script"}