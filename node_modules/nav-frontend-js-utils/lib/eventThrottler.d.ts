import * as React from 'react';
export interface EventThrottlerProps {
    children: React.ReactNode | React.ReactChild | React.ReactChildren;
    callback: () => void;
    delay?: number;
    event: 'resize';
}
export declare class EventThrottler extends React.Component<EventThrottlerProps> {
    private throttled;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): string | number | boolean | {} | React.ReactElement<any> | React.ReactNodeArray | React.ReactPortal | React.ReactChildren | (string & {}) | (string & React.ReactElement<any>) | (string & React.ReactNodeArray) | (string & React.ReactPortal) | (number & {}) | (number & React.ReactElement<any>) | (number & React.ReactNodeArray) | (number & React.ReactPortal) | (true & {}) | (true & React.ReactElement<any>) | (true & React.ReactNodeArray) | (true & React.ReactPortal) | (false & {}) | (false & React.ReactElement<any>) | (false & React.ReactNodeArray) | (false & React.ReactPortal) | (React.ReactElement<any> & string) | (React.ReactElement<any> & number) | (React.ReactElement<any> & true) | (React.ReactElement<any> & false) | (React.ReactElement<any> & React.ReactNodeArray) | (React.ReactElement<any> & React.ReactPortal) | (React.ReactNodeArray & string) | (React.ReactNodeArray & number) | (React.ReactNodeArray & true) | (React.ReactNodeArray & false) | (React.ReactNodeArray & React.ReactElement<any>) | (React.ReactNodeArray & React.ReactPortal) | (React.ReactPortal & string) | (React.ReactPortal & number) | (React.ReactPortal & true) | (React.ReactPortal & false) | (React.ReactPortal & React.ReactElement<any>) | (React.ReactPortal & React.ReactNodeArray) | (string & React.ReactChildren) | (number & React.ReactChildren) | (true & React.ReactChildren) | (false & React.ReactChildren) | (React.ReactElement<any> & React.ReactChildren) | (React.ReactNodeArray & React.ReactChildren) | (React.ReactPortal & React.ReactChildren) | null | undefined;
}
