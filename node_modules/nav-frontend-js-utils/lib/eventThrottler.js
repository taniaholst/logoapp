"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var PT = require("prop-types");
var React = require("react");
var _throttle = require("lodash.throttle");

var EventThrottler = function (_React$Component) {
    _inherits(EventThrottler, _React$Component);

    function EventThrottler() {
        _classCallCheck(this, EventThrottler);

        return _possibleConstructorReturn(this, (EventThrottler.__proto__ || Object.getPrototypeOf(EventThrottler)).apply(this, arguments));
    }

    _createClass(EventThrottler, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.throttled = _throttle(this.props.callback, this.props.delay, { leading: false });
            window.addEventListener(this.props.event, this.throttled);
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            if (this.throttled) {
                window.removeEventListener(this.props.event, this.throttled);
            }
        }
    }, {
        key: "render",
        value: function render() {
            return this.props.children;
        }
    }]);

    return EventThrottler;
}(React.Component);

exports.EventThrottler = EventThrottler;
EventThrottler.propTypes = {
    children: PT.oneOfType([PT.arrayOf(PT.node), PT.node]).isRequired,
    callback: PT.func.isRequired,
    delay: PT.number,
    event: PT.oneOf(['resize']).isRequired
};
EventThrottler.defaultProps = {
    callback: function callback() {},
    delay: 0
};