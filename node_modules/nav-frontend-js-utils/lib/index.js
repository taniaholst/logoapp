"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

Object.defineProperty(exports, "__esModule", { value: true });
function autobind(ctx) {
    Object.getOwnPropertyNames(ctx.constructor.prototype).filter(function (prop) {
        return typeof ctx[prop] === 'function';
    }).forEach(function (method) {
        ctx[method] = ctx[method].bind(ctx);
    });
}
exports.autobind = autobind;
function s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString().substring(1);
}
function guid() {
    return "" + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}
exports.guid = guid;
function fn(value) {
    return typeof value === 'function' ? value : function () {
        return value;
    };
}
exports.fn = fn;
function addPropToObject(obj, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    obj[key] = value;
    return obj;
}
exports.addPropToObject = addPropToObject;
function omit(obj) {
    for (var _len = arguments.length, props = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        props[_key - 1] = arguments[_key];
    }

    return Object.entries(obj).filter(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 1),
            key = _ref4[0];

        return !props.includes(key);
    }).reduce(addPropToObject, {});
}
exports.omit = omit;
function nativeRaf() {
    if (typeof window !== 'undefined') {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame;
    }
    return undefined;
}
function polyfillRaf() {
    return function (callback, element, delay) {
        setTimeout(callback, delay || 1000 / 60, new Date().getTime());
    };
}
exports.requestAnimationFrame = nativeRaf() || polyfillRaf();
function clamp(lower, upper, numberish) {
    var num = parseFloat(numberish.toString());
    if (num < lower) return lower;
    if (num > upper) return upper;
    return num;
}
exports.clamp = clamp;
function getViewportDimensions() {
    return {
        w: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
        h: Math.max(document.documentElement.clientHeight, window.innerHeight || 0)
    };
}
exports.getViewportDimensions = getViewportDimensions;
function getScrollParents(element) {
    var parent = void 0;
    var arr = [];
    var overflowRegex = /(auto|scroll)/;
    for (parent = element; parent !== document.body; parent = parent.parentElement) {
        var style = getComputedStyle(parent);
        if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) {
            arr.push(parent);
        }
    }
    arr.push(window);
    return arr;
}
exports.getScrollParents = getScrollParents;
exports.keyCodes = {
    tab: 9,
    enter: 13,
    space: 32,
    pageup: 33,
    pagedown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    esc: 27
};
var eventThrottler_1 = require("./eventThrottler");
exports.EventThrottler = eventThrottler_1.EventThrottler;