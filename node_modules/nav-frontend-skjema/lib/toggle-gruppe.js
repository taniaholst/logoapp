"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PT = require("prop-types");
require("nav-frontend-skjema-style");
var classNames = require("classnames");

var ToggleGruppe = function (_React$Component) {
  _inherits(ToggleGruppe, _React$Component);

  function ToggleGruppe() {
    _classCallCheck(this, ToggleGruppe);

    return _possibleConstructorReturn(this, (ToggleGruppe.__proto__ || Object.getPrototypeOf(ToggleGruppe)).apply(this, arguments));
  }

  _createClass(ToggleGruppe, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          children = _props.children,
          name = _props.name,
          onChange = _props.onChange,
          className = _props.className;

      var cls = function cls(classes) {
        return classNames('toggle', classes);
      };
      return React.createElement("div", { className: cls(className) }, children.map(function (toggleKnapp) {
        return React.cloneElement(toggleKnapp, { name: name, onChange: onChange, key: toggleKnapp.props.value });
      }));
    }
  }]);

  return ToggleGruppe;
}(React.Component);

ToggleGruppe.defaultProps = {
  className: '',
  onChange: undefined
};
ToggleGruppe.propTypes = {
  /**
   * Et sett med ToggleKnapp-er
   */
  children: PT.node.isRequired,
  /**
   * className
   */
  className: PT.string,
  /**
   * Navnet som brukes på radio button gruppen
   */
  name: PT.string.isRequired,
  /**
   * Funksjon som håndterer endring av valgt knapp.
   * Funksjonen tar event. Iden til det klikkede elementet ligger på e.target.value
   * onChange kalles hver gang en knapp blir trykket.
   */
  onChange: PT.func
};
exports.default = ToggleGruppe;
ToggleGruppe.__docgenInfo = {"description":"","displayName":"ToggleGruppe","methods":[],"props":{"children":{"defaultValue":null,"description":"Array av toggle knapper","name":"children","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/toggle-gruppe.tsx","name":"ToggleGruppeProps"},"required":true,"type":{"name":"ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<any, any, any>)>[] | ... 6 more ... | (ReactElement<...>[] & ReactPortal)"}},"className":{"defaultValue":null,"description":"Klassenavn","name":"className","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/toggle-gruppe.tsx","name":"ToggleGruppeProps"},"required":false,"type":{"name":"string"}},"name":{"defaultValue":null,"description":"Navn attributt til toggle knapper","name":"name","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/toggle-gruppe.tsx","name":"ToggleGruppeProps"},"required":true,"type":{"name":"string"}},"onChange":{"defaultValue":null,"description":"Valgfri callback som blir kalt ved endring","name":"onChange","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/toggle-gruppe.tsx","name":"ToggleGruppeProps"},"required":false,"type":{"name":"(event: SyntheticEvent<EventTarget, Event>) => void"}}}}