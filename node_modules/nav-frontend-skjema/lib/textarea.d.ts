import * as PT from 'prop-types';
import * as React from 'react';
import 'nav-frontend-skjema-style';
export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
    /**
     * Ledetekst for tekstområdet
     */
    label?: React.ReactNode;
    /**
     * Maks antal tegn som kan skrives inn i tekstområdet
     */
    maxLength?: number;
    /**
     * Teksten som er skrevet inn i tekstområdet.
     */
    value: string;
    /**
     * Klassenavn for tekstomnrådet
     */
    textareaClass?: string;
    /**
     * Id for tekstområdet, settes til name eller random guid hvis prop ikke er satt
     */
    id?: string;
    /**
     * Navn for tekstområdet, settes til id eller random guid hvis prop ikke er satt
     */
    name?: string;
    /**
     * OnChange er pliktig
     */
    onChange: React.ChangeEventHandler<HTMLTextAreaElement>;
    /**
     * Hvis skjemaet har feil sender man inn et objekt med en feilmelding
     */
    feil?: React.ReactNode | boolean;
    tellerTekst?: (antallTegn: number, maxLength: number) => React.ReactNode;
    textareaRef?: () => any;
}
/**
 * Selvekspanderende tekstområde med teller
 */
declare class Textarea extends React.Component<TextareaProps> {
    private mirror;
    private tekstomrade;
    static propTypes: {
        /**
         * Ledetekst for tekstområdet
         */
        label: PT.Requireable<PT.ReactNodeLike>;
        /**
         * Maks antal tegn som kan skrives inn i tekstområdet
         */
        maxLength: PT.Requireable<number>;
        /**
         * Teksten som er skrevet inn i tekstområdet.
         */
        value: PT.Validator<string>;
        /**
         * Klassenavn for tekstomnrådet
         */
        textareaClass: PT.Requireable<string>;
        /**
         * Id for tekstområdet, settes til name eller random guid hvis prop ikke er satt
         */
        id: PT.Requireable<string>;
        /**
         * Navn for tekstområdet, settes til id eller random guid hvis prop ikke er satt
         */
        name: PT.Requireable<string>;
        /**
         * Optional onChange handler
         */
        onChange: PT.Validator<(...args: any[]) => any>;
        /**
         * Hvis skjemaet har feil sender man inn et objekt med en feilmelding
         */
        feil: PT.Requireable<string | number | boolean | {} | PT.ReactElementLike | PT.ReactNodeArray>;
        /**
         * Funksjon for å generere tellerteksten som vises nede i høyre hjørne
         */
        tellerTekst: PT.Requireable<(...args: any[]) => any>;
        /**
         * Referanse til selve textareafeltet. Brukes for eksempel til å sette fokus
         */
        textareaRef: PT.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        maxLength: number;
        textareaClass: string;
        id: undefined;
        name: undefined;
        feil: undefined;
        tellerTekst: typeof defaultTellerTekst;
        textareaRef: undefined;
    };
    constructor(props: any);
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    updateHeight(): void;
    renderTextareaElement(textareaRef: any, textareaClass: any, textareaId: any, feilmelding: any, feilmeldingId: any, name: any, onChange: any, other: any): JSX.Element;
    render(): JSX.Element;
}
declare function defaultTellerTekst(antallTegn: any, maxLength: any): JSX.Element;
export default Textarea;
