"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PT = require("prop-types");
var nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
require("nav-frontend-skjema-style");
var classNames = require("classnames");

var ToggleKnapp = function (_React$Component) {
  _inherits(ToggleKnapp, _React$Component);

  function ToggleKnapp() {
    _classCallCheck(this, ToggleKnapp);

    return _possibleConstructorReturn(this, (ToggleKnapp.__proto__ || Object.getPrototypeOf(ToggleKnapp)).apply(this, arguments));
  }

  _createClass(ToggleKnapp, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          children = _props.children,
          name = _props.name,
          defaultChecked = _props.defaultChecked,
          value = _props.value,
          onChange = _props.onChange,
          checked = _props.checked,
          className = _props.className;

      if (checked !== undefined && !onChange) {
        // Trenger bare onChange om man definerer checked
        console.warn("onChange har verdien: " + onChange);
      }
      var knappId = nav_frontend_js_utils_1.guid();
      var cls = function cls(classes) {
        return classNames('toggle__label', classes);
      };
      return React.createElement("div", null, React.createElement("input", { type: "radio", className: "toggle__input sr-only", defaultChecked: defaultChecked, onChange: onChange, name: name, id: knappId, value: value, checked: checked, "aria-checked": checked }), React.createElement("label", { className: cls(className), htmlFor: knappId }, children));
    }
  }]);

  return ToggleKnapp;
}(React.Component);

ToggleKnapp.defaultProps = {
  defaultChecked: undefined,
  checked: undefined,
  className: undefined,
  onChange: undefined,
  name: 'ToggleKnapp-default-name'
};
ToggleKnapp.propTypes = {
  /**
   * Innhold i label
   */
  children: PT.node.isRequired,
  /**
   * Navnet som brukes på radio knappen
   */
  name: PT.string,
  /**
   * Funksjon som håndterer endring av valgt knapp.
   * Funksjonen tar event. Iden til det klikkede elementet ligger på e.target.value
   * onChange kalles hver gang en knapp blir trykket.
   */
  onChange: PT.func,
  /**
   * Mulighet til å oppgi iden til en knapp som vil være satt som default
   */
  defaultChecked: PT.bool,
  /**
   * Value som brukes på alle ToggleKnapper i gruppen
   */
  value: PT.string.isRequired,
  /**
   * Marker en knapp som valgt
   */
  checked: PT.bool,
  /**
   * Classname
   */
  className: PT.string
};
exports.default = ToggleKnapp;
ToggleKnapp.__docgenInfo = {"description":"","displayName":"ToggleKnapp","methods":[],"props":{}}