"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var PT = require("prop-types");
var React = require("react");
var classNames = require("classnames");
var skjemaelement_feilmelding_1 = require("./skjemaelement-feilmelding");
require("nav-frontend-skjema-style");
var cls = function cls(className, harFeil) {
    return classNames('skjemagruppe', className, {
        'skjemagruppe--feil': harFeil
    });
};
exports.SkjemaGruppeFeilContext = React.createContext({});
/**
 * Fieldset
 */

var SkjemaGruppe = function (_React$Component) {
    _inherits(SkjemaGruppe, _React$Component);

    function SkjemaGruppe() {
        _classCallCheck(this, SkjemaGruppe);

        return _possibleConstructorReturn(this, (SkjemaGruppe.__proto__ || Object.getPrototypeOf(SkjemaGruppe)).apply(this, arguments));
    }

    _createClass(SkjemaGruppe, [{
        key: "render",
        value: function render() {
            var _props = this.props,
                children = _props.children,
                className = _props.className,
                feil = _props.feil,
                legend = _props.legend,
                _props$tag = _props.tag,
                tag = _props$tag === undefined ? 'fieldset' : _props$tag,
                feilmeldingId = _props.feilmeldingId,
                other = _objectWithoutProperties(_props, ["children", "className", "feil", "legend", "tag", "feilmeldingId"]);

            var content = React.createElement(React.Fragment, null, legend && React.createElement("legend", { className: "skjemagruppe__legend" }, legend), React.createElement(exports.SkjemaGruppeFeilContext.Provider, { value: { feil: feil, feilmeldingId: feilmeldingId } }, children), React.createElement(skjemaelement_feilmelding_1.default, { id: feilmeldingId }, typeof feil !== 'boolean' && feil));
            return React.createElement(tag, _extends({
                className: cls(className, feil),
                'aria-invalid': !!feil,
                'aria-errormessage': feilmeldingId
            }, other), content);
        }
    }]);

    return SkjemaGruppe;
}(React.Component);

SkjemaGruppe.propTypes = {
    /**
     * En eller flere children, oftest en eller flere .skjemaelement
     */
    children: PT.oneOfType([PT.arrayOf(PT.node), PT.node]).isRequired,
    /**
     * ClassName
     */
    className: PT.string,
    /**
     * Bestemmer hvilken HTML-tag som skal brukes
     */
    tag: PT.string,
    /**
     * legend for skjemagruppen
     */
    legend: PT.node,
    /**
     * Feilmelding
     */
    feil: PT.oneOfType([PT.node, PT.bool])
};
SkjemaGruppe.defaultProps = {
    className: undefined,
    feil: undefined,
    tag: 'fieldset'
};
exports.default = SkjemaGruppe;
SkjemaGruppe.__docgenInfo = {"description":"Fieldset","displayName":"SkjemaGruppe","methods":[],"props":{"children":{"defaultValue":null,"description":"En eller flere children, oftest en eller flere .skjemaelement","name":"children","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/skjema-gruppe.tsx","name":"SkjemaGruppeProps"},"required":true,"type":{"name":"string | number | boolean | {} | ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)> | ... 47 more ... | (ReactNode[] & ReactPortal)"}},"className":{"defaultValue":null,"description":"ClassName","name":"className","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/skjema-gruppe.tsx","name":"SkjemaGruppeProps"},"required":false,"type":{"name":"string"}},"tag":{"defaultValue":null,"description":"Bestemmer hvilken HTML-tag som skal brukes. Default er 'fieldset'.","name":"tag","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/skjema-gruppe.tsx","name":"SkjemaGruppeProps"},"required":false,"type":{"name":"string"}},"legend":{"defaultValue":null,"description":"Legend/tittel for skjemagruppen","name":"legend","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/skjema-gruppe.tsx","name":"SkjemaGruppeProps"},"required":false,"type":{"name":"ReactNode"}},"feil":{"defaultValue":null,"description":"Hvis skjemagruppen har feil sender man inn et objekt med en feilmelding","name":"feil","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/skjema-gruppe.tsx","name":"SkjemaGruppeProps"},"required":false,"type":{"name":"ReactNode"}},"feilmeldingId":{"defaultValue":null,"description":"Valgfri ID til intern SkjemaelementFeilmelding","name":"feilmeldingId","parent":{"fileName":"nav-frontend-moduler/packages/node_modules/nav-frontend-skjema/src/skjema-gruppe.tsx","name":"SkjemaGruppeProps"},"required":false,"type":{"name":"string"}}}}